type array(from, len) where {
    assert from <= (from + len);
    @byte for (ptr) if (from <= ptr) && (ptr < (from + len));
}

fn fill_vec(ptr, len, new) where {
    move _ = array(ptr, len);
} -> () where {
    move _ = array(ptr, len);
} = {
    if_zero len {
        return ()
    };
    let () = @write_u8(ptr, new);

    return fill_vec(ptr + 1, len - 1, new)
}


