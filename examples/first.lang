

type terminated(ptr) where {
    move val = @byte (ptr);
    terminated for (new_ptr) if (new_ptr == (ptr + 1)) && (val != 0);
}

fn fill_string(ptr, new) where {
    move _ = terminated(ptr); 
    assert new != 0;
} -> () where {
    move _ = terminated(ptr);
} = {
    let (val) = @read_u8(ptr);
    if_zero val {
        return ()
    };
    let () = @write_u8(ptr, new);

    unpack terminated(ptr + 1);
    return fill_string(ptr + 1, new)
}

fn fib(n) where {
    assert n <= 10;
} -> (out) where {
    assert n <= out;
} = {
    if_zero (1 < n) {
        return (1)
    };
    let (val1) = fib(n - 1);
    let (val2) = fib(n - 2);
    return (val1 + val2)
}


type mem(ptr) where {
    move _ = @byte (ptr);
}

type array(from, len) where {
    assert from <= (from + len);
    mem for (ptr) if (from <= ptr) && (ptr < (from + len));
}

fn fill_vec(ptr, len, new) where {
    move _ = array(ptr, len);
} -> () where {
    move _ = array(ptr, len);
} = {
    if_zero len {
        return ()
    };
    unpack mem(ptr);
    let () = @write_u8(ptr, new);
    pack mem(ptr);

    return fill_vec(ptr + 1, len - 1, new)
}


