type vec3(ptr) where {
    move x = @byte(ptr + 0);
    move y = @byte(ptr + 1);
    move z = @byte(ptr + 2);
}

fn add_vec3(from, to) where {
    move _ = vec3(from);
    move _ = vec3(to);
} -> () where {
    move _ = vec3(from);
    move _ = vec3(to);
} = {
    let (x1) = @read_u8(from + 0);
    let (y1) = @read_u8(from + 1);
    let (z1) = @read_u8(from + 2);
    let (x2) = @read_u8(to + 0);
    let (y2) = @read_u8(to + 1);
    let (z2) = @read_u8(to + 2);
    let () = @write_u8(to + 0, x1 + x2);
    let () = @write_u8(to + 1, y1 + y2);
    let () = @write_u8(to + 2, z1 + z2);
    return ()
}

type vec3_array(start, len) where {
    vec3 for (ptr) if 
        (((ptr - start) % 4) == 0) 
        && ((ptr - start) < (len * 4));
    assert len *? 4;
}

fn sum_vec3_array(start, len, out) where {
    move _ = vec3_array(start, len);
    move _ = vec3(out);
} -> () where {
    move _ = vec3_array(start, len);
    move _ = vec3(out);
} = {
    if_zero (len) {
        return ()
    };

    unpack vec3(start);
    let () = add_vec3(start, out);
    pack vec3(start);
    
    return sum_vec3_array(start + 4, len - 1, out)
}