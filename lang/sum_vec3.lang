type vec3(ptr) where {
    x = @byte(ptr + 0);
    y = @byte(ptr + 1);
    z = @byte(ptr + 2);
    _ = @byte(ptr + 3);
}

fn add_vec3(from: vec3, to: vec3) -> () where {
    vec3(from.ptr);
    vec3(to.ptr);
} = {
    let (x1) = @read8(from.ptr + 0);
    let (y1) = @read8(from.ptr + 1);
    let (z1) = @read8(from.ptr + 2);
    let (x2) = @read8(to.ptr + 0);
    let (y2) = @read8(to.ptr + 1);
    let (z2) = @read8(to.ptr + 2);
    let () = @write8(to.ptr + 0, x1 + x2);
    let () = @write8(to.ptr + 1, y1 + y2);
    let () = @write8(to.ptr + 2, z1 + z2);
    return ()
}

type array3(start, len) where {
    vec3 for (ptr) if 
        (((ptr - start) % 4) == 0) 
        && ((ptr - start) < (len * 4));
    assert len *? 4;
}

type array(start, len) where {
    @byte for (ptr) if (ptr - start) < len;
}

fn sum_array3(vs: array3, out: vec3) -> () where {
    array3(vs.start, vs.len);
    vec3(out.ptr);
} = {
    if (vs.len == 0) {
        return ()
    };

    let () = add_vec3(vec3(vs.start), out);   
    return sum_array3(array3(vs.start + 4, vs.len - 1), out)
}

fn generate_array(len) where {
    assert len *? 4;
} -> (_: array3) = {
    let (start) = @alloc(len * 4);

    fn inner(idx) where {
        assert idx <= len;
        array(start + (idx * 4), (len - idx) * 4);
        array3(start, idx);
    } -> (_: array3) = {
        if (len <= idx) {
            return (array3(start, len))
        };
        let () = make_vec3(start + (idx * 4));
        return inner(idx + 1)
    };

    return inner(0)
}

fn make_vec3(ptr) where { array(ptr, 4); } -> () where { vec3(ptr); } = { 
    return ()
}

fn main(len) where {
    assert len *? 4;
} -> (val, _: array3, out: vec3) = {
    let (vs) = generate_array(len);
    let (out) = @alloc(4);
    let () = make_vec3(out);
    let () = sum_array3(vs, vec3(out));
    let (x) = @read8(out + 0);
    let (y) = @read8(out + 1);
    let (z) = @read8(out + 2);
    return (x + (y + z), vs, vec3(out))
}   