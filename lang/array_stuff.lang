type array(from, len) where {
    @byte for (ptr) if (ptr - from) < len;
}

fn fib(n) where {
    assert n < (n + 1);
} -> (out, ptr) where {
    array(ptr, n + 1);
} = {
    let (start) = new_array(n + 1, 1);

    fn final() where {
        array(start, n + 1);
    } -> (out, ptr) where {
        array(ptr, n + 1);
    } = {
        let (val) = @read8(start + n);
        return (val, start)
    };

    if (n < 2) {
        return final()
    };

    loop inner(ptr) where {
        assert 2 <= (ptr - start);
        assert (ptr - start) <= (n + 1);
        array(start, n + 1);
    } = {
        if (ptr - start) == (n + 1) {
            return (ptr)
        };
        let (a) = @read8(ptr - 2);
        let (b) = @read8(ptr - 1);
        let () = @write8(ptr, a + b);
        return inner(ptr + 1)
    };

    let (_) = inner(start + 2);
    return final()
}

fn new_array(size, val) -> (out) where {
    array(out, size);
} = {
    let (start) = @alloc(size);
    
    loop fill(ptr) where { 
        assert (ptr - start) <= size;
        array(start, size);
    } = {
        if (ptr - start) == size {
            return (ptr)
        };
        let () = @write8(ptr, val);
        return fill(ptr + 1)
    };

    let (_) = fill(start);
    return (start)
}


fn get_len(xs: array) -> (len) where {
    assert xs.len == len;
    xs;
} = {
    return (xs.len)
}


fn get_rem(xs: array) where {
    assert 0 < xs.len;
} -> (ys: array) where {
    @byte (xs.from);
} = {
    return (array(xs.from + 1, xs.len - 1))
}