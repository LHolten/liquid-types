type array(from, len) where {
    @byte for (ptr) if (ptr - from) < len;
}

type arrayln(from, len) where {
    assert 1 <= len;
    last = move @byte(from + (len - 1));
    assert last == '\n';
    move array(from, len - 1);
}

fn part1(len) where {
    arr = move arrayln(0, len);
} -> (out) where { 
    arr;
} = {
    fn inner(sum, idx) where {
        assert idx <= len;
        arr = move arrayln(0, len);
    } -> (sum, idx) where {
        assert idx <= len;
        arr;
    } = {
        if idx == len {
            return (sum, idx)
        };

        fn find_first(i, prev) where {
            assert i < len;
            arr = move arrayln(0, len);
        } -> (i, prev) where {
            assert i < len;
            arr;
        } = {
            let (val) = @read_u8(i);
            if val == '\n' {
                return (i, prev)
            };
            if ('0' <= val) && (val <= '9') {
                return (i + 1, val - '0')
            };
            return find_first(i + 1, prev)
        };

        fn find_last(idx, prev) where {
            assert idx < len;
            arr = move arrayln(0, len);
        } -> (idx, prev) where {
            assert idx < len;
            arr;
        } = {
            let (val) = @read_u8(idx);
            if val == '\n' {
                return (idx, prev)
            };
            if ('0' <= val) && (val <= '9') {
                return find_last(idx + 1, val - '0')
            };
            return find_last(idx + 1, prev)
        };

        let (idx, first) = find_first(idx, 0);
        let (idx, last) = find_last(idx, first);
        return inner(sum + ((10 * first) + last), idx + 1)
    };

    let (sum, end) = inner(0, 0);
    return (sum)
}