
fn factorial(n) -> (out) = {
    fn inner(res, i) -> (out) = {    
        if i == 0 {
            return (res)
        };
        return inner(res * i, i - 1)
    };
    return inner(1, n)
}

fn fib(n) -> (out) = {
    if (n < 2) {
        return (1)
    };
    let (a) = fib(n - 2);
    let (b) = fib(n - 1);
    return (a + b)
}

fn product_of_two_odd_is_odd(a, b) where {
    assert (a % 2) == 1;
    assert (b % 2) == 1;
} -> (product) where {
    assert (product % 2) == 1;
} = {
    return (a * b)
}
