type quad(ptr) where {
    p0 = move @byte(ptr + 0);
    p1 = move @byte(ptr + 1);
    p2 = move @byte(ptr + 2);
    p3 = move @byte(ptr + 3);
    let le = ((p3 << 8) + (p2 << 16)) + ((p1 << 8) + p0);
}

type linked(ptr) where {
    val = quad(ptr);
    next = quad(ptr + 4);
    move linked(next.le) if next.le != 0;
}

fn main() -> (ptr, num) where {
    quad(ptr);
} = {
    let (ptr) = @alloc(4);
    let () = @write32(ptr, 42);
    let (res) = @read32(ptr);
    return (ptr, res)
}